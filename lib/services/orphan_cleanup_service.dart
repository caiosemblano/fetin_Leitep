import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../utils/app_logger.dart';

/// Servi√ßo respons√°vel por identificar e limpar dados √≥rf√£os no banco de dados
class OrphanCleanupService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// Executa uma limpeza completa de todos os dados √≥rf√£os
  static Future<OrphanCleanupResult> performFullCleanup() async {
    try {
      AppLogger.info('üßπ Iniciando limpeza completa de dados √≥rf√£os');

      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Usu√°rio n√£o autenticado');
      }

      final result = OrphanCleanupResult();

      // 1. Limpar registros de produ√ß√£o √≥rf√£os
      final prodOrphans = await _cleanOrphanProductionRecords(user.uid);
      result.productionRecordsDeleted = prodOrphans;

      // 2. Limpar alertas √≥rf√£os
      final alertOrphans = await _cleanOrphanAlerts(user.uid);
      result.alertsDeleted = alertOrphans;

      // 3. Limpar alertas individuais √≥rf√£os
      final individualOrphans = await _cleanOrphanIndividualAlerts(user.uid);
      result.individualAlertsDeleted = individualOrphans;

      // 4. Limpar atividades √≥rf√£s (se necess√°rio)
      final activityOrphans = await _cleanOrphanActivities(user.uid);
      result.activitiesDeleted = activityOrphans;

      // 5. Limpar backups √≥rf√£os
      final backupOrphans = await _cleanOrphanBackups(user.uid);
      result.backupsDeleted = backupOrphans;

      result.totalOrphansDeleted = result.productionRecordsDeleted +
          result.alertsDeleted +
          result.individualAlertsDeleted +
          result.activitiesDeleted +
          result.backupsDeleted;

      AppLogger.info(
          '‚úÖ Limpeza conclu√≠da: ${result.totalOrphansDeleted} registros √≥rf√£os removidos',);

      return result;
    } catch (e) {
      AppLogger.error('‚ùå Erro na limpeza de √≥rf√£os', e);
      rethrow;
    }
  }

  /// Limpa registros de produ√ß√£o que referenciam vacas inexistentes
  static Future<int> _cleanOrphanProductionRecords(String userId) async {
    try {
      AppLogger.info('üîç Verificando registros de produ√ß√£o √≥rf√£os');

      // Buscar todas as vacas existentes do usu√°rio na cole√ß√£o GLOBAL
      final vacasSnapshot = await _firestore
          .collection('vacas')
          .where('userId', isEqualTo: userId)
          .get();

      final existingVacaIds = vacasSnapshot.docs.map((doc) => doc.id).toSet();

      AppLogger.info(
          'üêÑ Total de vacas encontradas: ${existingVacaIds.length}',);

      // Buscar todos os registros de produ√ß√£o do usu√°rio na SUBCOLE√á√ÉO
      final producaoSnapshot = await _firestore
          .collection('usuarios')
          .doc(userId)
          .collection('registros_producao')
          .get();

      int orphansDeleted = 0;
      final batch = _firestore.batch();

      for (final doc in producaoSnapshot.docs) {
        final data = doc.data();
        final vacaId = data['vaca_id'] as String?; // Campo correto √© vaca_id

        // Se o registro referencia uma vaca que n√£o existe mais
        if (vacaId != null && !existingVacaIds.contains(vacaId)) {
          batch.delete(doc.reference);
          orphansDeleted++;
          AppLogger.warning(
              'üóëÔ∏è Registro √≥rf√£o encontrado: ${doc.id} -> vaca inexistente: $vacaId',);
        }
      }

      if (orphansDeleted > 0) {
        await batch.commit();
        AppLogger.info(
            '‚úÖ Removidos $orphansDeleted registros de produ√ß√£o √≥rf√£os',);
      }

      return orphansDeleted;
    } catch (e) {
      AppLogger.error('‚ùå Erro ao limpar registros de produ√ß√£o √≥rf√£os', e);
      return 0;
    }
  }

  /// Limpa alertas de produ√ß√£o que referenciam vacas inexistentes
  static Future<int> _cleanOrphanAlerts(String userId) async {
    try {
      AppLogger.info('üîç Verificando alertas de produ√ß√£o √≥rf√£os');

      // Buscar todas as vacas existentes do usu√°rio
      final vacasSnapshot = await _firestore
          .collection('vacas')
          .where('userId', isEqualTo: userId)
          .get();

      final existingVacaIds = vacasSnapshot.docs.map((doc) => doc.id).toSet();

      // Buscar todos os alertas (sem filtro por userId pois n√£o t√™m esse campo)
      final alertsSnapshot =
          await _firestore.collection('alertas_producao').get();

      int orphansDeleted = 0;
      final batch = _firestore.batch();

      for (final doc in alertsSnapshot.docs) {
        final data = doc.data();
        final vacaId = data['vacaId'] as String?;

        // Se o alerta referencia uma vaca que n√£o existe mais
        if (vacaId != null && !existingVacaIds.contains(vacaId)) {
          batch.delete(doc.reference);
          orphansDeleted++;
          AppLogger.warning(
              'üóëÔ∏è Alerta √≥rf√£o encontrado: ${doc.id} -> vaca inexistente: $vacaId',);
        }
      }

      if (orphansDeleted > 0) {
        await batch.commit();
        AppLogger.info('‚úÖ Removidos $orphansDeleted alertas √≥rf√£os');
      }

      return orphansDeleted;
    } catch (e) {
      AppLogger.error('‚ùå Erro ao limpar alertas √≥rf√£os', e);
      return 0;
    }
  }

  /// Limpa alertas individuais que referenciam vacas inexistentes
  static Future<int> _cleanOrphanIndividualAlerts(String userId) async {
    try {
      AppLogger.info('üîç Verificando alertas individuais √≥rf√£os');

      // Buscar todas as vacas existentes do usu√°rio
      final vacasSnapshot = await _firestore
          .collection('vacas')
          .where('userId', isEqualTo: userId)
          .get();

      final existingVacaIds = vacasSnapshot.docs.map((doc) => doc.id).toSet();

      // Buscar alertas individuais que s√£o documentos com ID = vacaId
      int orphansDeleted = 0;
      final batch = _firestore.batch();

      // Verificar cada vaca ID se tem alerta individual √≥rf√£o
      final individualAlertsSnapshot =
          await _firestore.collection('alertas_individuais').get();

      for (final doc in individualAlertsSnapshot.docs) {
        final vacaId = doc.id; // O ID do documento √© o ID da vaca

        if (!existingVacaIds.contains(vacaId)) {
          batch.delete(doc.reference);
          orphansDeleted++;
          AppLogger.warning('üóëÔ∏è Alerta individual √≥rf√£o encontrado: $vacaId');
        }
      }

      if (orphansDeleted > 0) {
        await batch.commit();
        AppLogger.info(
            '‚úÖ Removidos $orphansDeleted alertas individuais √≥rf√£os',);
      }

      return orphansDeleted;
    } catch (e) {
      AppLogger.error('‚ùå Erro ao limpar alertas individuais √≥rf√£os', e);
      return 0;
    }
  }

  /// Limpa atividades √≥rf√£s (se houver refer√™ncias a vacas)
  static Future<int> _cleanOrphanActivities(String userId) async {
    try {
      AppLogger.info('üîç Verificando atividades √≥rf√£s');

      // Como as atividades s√£o armazenadas no AtividadesRepository (em mem√≥ria),
      // n√£o h√° limpeza necess√°ria aqui, mas podemos verificar dados persistidos
      // se no futuro as atividades forem salvas no Firestore

      return 0;
    } catch (e) {
      AppLogger.error('‚ùå Erro ao verificar atividades', e);
      return 0;
    }
  }

  /// Limpa metadados de backup √≥rf√£os
  static Future<int> _cleanOrphanBackups(String userId) async {
    try {
      AppLogger.info('üîç Verificando backups √≥rf√£os');

      // Por agora, pular limpeza de backups para evitar problema de √≠ndice
      // Isso ser√° tratado pelo BackupService que tem sua pr√≥pria l√≥gica de limpeza
      AppLogger.info('ÔøΩ Limpeza de backups delegada ao BackupService');

      return 0;
    } catch (e) {
      AppLogger.error('‚ùå Erro ao limpar backups √≥rf√£os', e);
      return 0;
    }
  }

  /// Executa apenas verifica√ß√£o sem deletar (modo dry-run)
  static Future<OrphanCleanupResult> checkOrphansOnly() async {
    try {
      AppLogger.info('üîç Verificando √≥rf√£os (modo consulta apenas)');

      final user = _auth.currentUser;
      if (user == null) {
        throw Exception('Usu√°rio n√£o autenticado');
      }

      final result = OrphanCleanupResult();

      // Buscar todas as vacas existentes
      final vacasSnapshot = await _firestore
          .collection('vacas')
          .where('userId', isEqualTo: user.uid)
          .get();

      final existingVacaIds = vacasSnapshot.docs.map((doc) => doc.id).toSet();

      // Contar registros √≥rf√£os (sem deletar)
      final producaoSnapshot = await _firestore
          .collection('registros_producao')
          .where('userId', isEqualTo: user.uid)
          .get();

      for (final doc in producaoSnapshot.docs) {
        final data = doc.data();
        final vacaId = data['vacaId'] as String?;

        if (vacaId != null && !existingVacaIds.contains(vacaId)) {
          result.productionRecordsDeleted++;
        }
      }

      AppLogger.info(
          'üìä Encontrados ${result.productionRecordsDeleted} registros √≥rf√£os',);

      return result;
    } catch (e) {
      AppLogger.error('‚ùå Erro na verifica√ß√£o de √≥rf√£os', e);
      rethrow;
    }
  }

  /// Limpa √≥rf√£os de uma vaca espec√≠fica que foi deletada
  static Future<void> cleanupAfterCowDeletion(
      String cowId, String userId,) async {
    try {
      AppLogger.info('üßπ Limpando dados √≥rf√£os da vaca: $cowId');

      final batch = _firestore.batch();

      // Limpar registros de produ√ß√£o na subcole√ß√£o correta
      final producaoQuery = await _firestore
          .collection('usuarios')
          .doc(userId)
          .collection('registros_producao')
          .where('vaca_id', isEqualTo: cowId)
          .get();

      for (final doc in producaoQuery.docs) {
        batch.delete(doc.reference);
      }

      // Limpar alertas
      final alertsQuery = await _firestore
          .collection('alertas_producao')
          .where('vacaId', isEqualTo: cowId)
          .get();

      for (final doc in alertsQuery.docs) {
        batch.delete(doc.reference);
      }

      // Limpar alerta individual
      final individualAlertRef =
          _firestore.collection('alertas_individuais').doc(cowId);

      batch.delete(individualAlertRef);

      await batch.commit();

      AppLogger.info('‚úÖ Limpeza da vaca $cowId conclu√≠da');
    } catch (e) {
      AppLogger.error('‚ùå Erro na limpeza da vaca $cowId', e);
    }
  }
}

/// Resultado da opera√ß√£o de limpeza
class OrphanCleanupResult {
  int productionRecordsDeleted = 0;
  int alertsDeleted = 0;
  int individualAlertsDeleted = 0;
  int activitiesDeleted = 0;
  int backupsDeleted = 0;
  int totalOrphansDeleted = 0;

  @override
  String toString() {
    return '''
üßπ Resultado da Limpeza:
‚Ä¢ Registros de produ√ß√£o: $productionRecordsDeleted
‚Ä¢ Alertas: $alertsDeleted  
‚Ä¢ Alertas individuais: $individualAlertsDeleted
‚Ä¢ Atividades: $activitiesDeleted
‚Ä¢ Backups: $backupsDeleted
üìä Total: $totalOrphansDeleted √≥rf√£os removidos
    ''';
  }
}
